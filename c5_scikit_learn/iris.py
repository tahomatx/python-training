from sklearn.datasets import load_iris


# Irisというデータを使用してみる。このように'分析したいデータの集まり'をデータセットという。
# 
# データの中身は https://www.kaggle.com/arshid/iris-flower-dataset で見られる。
# データは5列(表の横方向)の情報が150行(縦方向、レコード)ある。
# 1つのデータには4つの数字(5.1, 3.5, 1.4, 0.2)と1つの文字列('Iris-setosa'、'Iris-versicolor'、'Iris-virginica' など))が入っている。
# 
# このデータセットは、3種類の花について、花の背丈や葉の大きさ、花弁の大きさなど、4つの計測値と、それがそれぞれどの花の種なのかを記録したもの。データセットの4つの数値がそれぞれの計測値で、文字列のところが花の種類です。
# 
# これからやりたいことは、この計測した4つの数字からどの種の花なのかを当てる機械学習モデルをつくることです。
# ここで行うのはシンプルな例ですが、推定に使える値の集まりから、なにか別の情報を推定することを目的にしています。
# その推定方法をコンピュータに自動的に見つけさせる(学習させる)ことから機械学習と呼ばれます。

# Irisデータセットはこのように書くと簡単にを取得できる。
# これはIrisデータセットがとても有名なデータセットで機械学習の入門時に非常によく使われるから。
# 実際の仕事では、このデータセットを準備･作成するところから仕事が始まる。
iris = load_iris()


# Irisデータセットがどのようなデータなのかを見てみる。
# 大枠として、`iris.data`の情報を元に`iris.target`を推定する方法を学習させる。

# iris.dataのなかに実際にこれから推定に使用するデータが入っている。
# iris.dataはリストの中にリストが入っている構造になっている。
# dataにはどの花の種なのかを当てる元になる計測値4つが入っている。150件あるので、構造としては4つの数値が150個あることになる。
print('Irisデータセットの構造(推定に使う値) *********************************************')
print(iris.data.shape)
print(iris.data)


# iris.targetには推定したい値が入っている。
# 推定したい値は3種類の花の種だが、もともとは文字列で入っていた。
# しかし、データセットの中では、0、1、2という3つの数字をそれぞれの種に割り当てている。
# そのため、150個分の数字(0,1,2の3種類)が入っている。
print('Irisデータセットの構造(推定したい値) *********************************************')
print(iris.target.shape)
print(iris.target)


# 数値で表現された花の種を文字列に戻すには次のようにする。
print('3つの数値にした花の種を文字列に戻す *********************************************')
print(iris.target_names[iris.target])


# 機械学習モデルを学習させる準備をする。
# ここでは、150件のデータを80%と20%に分ける。
# 80%のデータは機械学習モデルの学習に使い、残りの20%を学習されたモデルがどのように推定をしてくれるかを検証するために使う。機械学習モデルにとって、20%のデータは知らないデータということになる。
# train_X,trainYには学習に使う80%のデータが入っている。
# test_X,test_Yには学習モデルの検証に使うデータが入っている。
# ちなみに、Xが推定に使う情報、Yが推定したい情報です。
from sklearn.model_selection import train_test_split
(train_X, test_X, train_Y, test_Y) = train_test_split(iris.data, iris.target, test_size=0.2)


# 繰り返しになるが、Xの4つの数値を使って、Yを推定する機械学習モデルを作ることになる。
print('2つに分割したデータセットのうち、20%の方のデータを見てみる ****************************************')
print(test_X)
print(test_Y)


# 機械学習モデルを学習させる。
from sklearn.linear_model import Perceptron
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

# ここでは パーセプトロン という機械学習モデルを使う。
# 機械学習モデルはいろいろな種類があり、データの特徴に応じて学習の得意･不得意がある。
# この例ではscikit-learnというライブラリを使っているが、どのような機械学習モデルでも同じように学習と、推定を行うことができる。
model = Perceptron()

# 実際に学習を行っているのはこの行。
# 学習用のデータ train_Xとtrain_Y を使っている。(学習はただ単にfit関数に推定元のデータと推定したいデータを渡すだけ。)
# これを行うと、データを元に、推定元のデータから推定したい情報を得られる機械学習モデルが学習される。
model.fit(train_X, iris.target_names[train_Y])
# この行を通過した時点で、`model`には4つの数値データから花の種類を見分ける方法を学習している。


# 学習が完了した機械学習モデルでどのような学習が行われたのかを調べるため、20%に分割した方の検証用データを使って結果を検証する。
# Xのデータを元にYを予測する。predには推定結果が入る。
pred = model.predict(test_X)


# 推定情報をもとに、正解率を計算する。
score = accuracy_score(iris.target_names[test_Y], pred)
print('検証用データ(20%のデータ)の正解率: {}%'.format(score * 100))
